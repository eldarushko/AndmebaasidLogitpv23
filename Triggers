--Trigerid
--SQL triger -protsess, mille abil tema sisse
-- kirjutatud tegevused automaatselt käivitakse.

--INSERT UPDATE DELETE trigerid mis jälgivad antud tegevused tabelites
-- ja kirjutavad logi tabeli mida nad jälgisid
use logunov;
create table toode(
toodeID int primary key identity(1,1),
toodeNimetus varchar(25),
toodeHind decimal(5,2));
--tabel logi, mis täidab triger
create table logi(
id int primary key identity(1,1),
tegevus varchar(25),
kuupaev datetime,
andmed text);

--INSERT triger, mis jälgib andmete lisamine toode tabelisse
create trigger toodeLisamine
ON toode
for INSERT
AS
INSERT INTO logi(tegevus, kuupaev, andmed)
SELECT 'toode on lisatud',
GETDATE(),
inserted.toodeNimetus
FROM inserted;

DROP trigger toodeLisamine;

--kontroll 
INSERT INTO toode(toodeNimetus, toodeHind)
VALues('Sprite', 2.10);

SELECT * FROM toode;
SELECT * FROM logi;

--DELETE TRIGER, mis jälgib toode kustutamine tabelis

create trigger toodeKustutamine
on toode
for DELETE
AS
INSERT INTO logi(tegevus, kuupaev, andmed)
SELECT 'toode on kustutatud',
GETDATE(),
CONCAT(deleted.toodeNimetus, ' | tegi kasutaja ', SYSTEM_USER) 
FROM deleted;
--kontroll
DELETE FROM toode
WHERE toodeID=1;
SELECT * FROM toode;
SELECT * FROM logi;

--Update triger, mis jälgib toode uuendamine tabelis

create trigger toodeUuendamine
on toode
for UPDATE
AS
INSERT INTO logi(tegevus, kuupaev, andmed)
SELECT 'toode on uuendatud',
GETDATE(),
CONCAT('Vanad andmed - ', deleted.toodeNimetus,', ' ,deleted.toodeHind,
'\nUued andmed - ', inserted.toodeNimetus,', ',inserted.toodeHind,
'| tegi kasutaja ', SYSTEM_USER) 
FROM deleted INNER JOIN inserted
ON deleted.toodeID=inserted.toodeID;

--kontroll
UPDATE toode set toodeHind=4.00
WHERE toodeNimetus='Sprite'
SELECT * FROM toode;
SELECT * FROM logi;

--ulesanne
CREATE TABLE product_audits(
    change_id INT IDENTITY PRIMARY KEY,
    product_id INT NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    brand_id INT NOT NULL,
    category_id INT NOT NULL,
    model_year SMALLINT NOT NULL,
    list_price DEC(10,2) NOT NULL,
    updated_at DATETIME NOT NULL,
    operation CHAR(3) NOT NULL,
    CHECK(operation = 'INS' or operation='DEL')
);

create table products(
product_id int primary key identity(1,1),
product_name varchar(25),
brand_id int,
category_id int,
model_year int,
list_price decimal(10,2)
);

CREATE TRIGGER trg_product_audit
ON products
AFTER INSERT, DELETE
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO product_audits(
        product_id, 
        product_name,
        brand_id,
        category_id,
        model_year,
        list_price, 
        updated_at, 
        operation
    )
    SELECT
        product_id,
        product_name,
        brand_id,
        category_id,
        model_year,
        list_price,
        GETDATE(),
        'INS'
    FROM
        inserted i
    UNION ALL
    SELECT
        product_id,
        product_name,
        brand_id,
        category_id,
        model_year,
        list_price,
        GETDATE(),
        'DEL'
    FROM
        deleted d;
END
INSERT INTO products(
    product_name, 
    brand_id, 
    category_id, 
    model_year, 
    list_price
)
VALUES (
    'Test product',
    2,
    2,
    2012,
    559
);
select * from products;
select * from product_audits;
DELETE FROM 
    products
WHERE 
    product_id = 2;

select * from products;
select * from product_audits;


--oma tabel ja trigger
create table test(
id int primary key identity(1,1),
nimetus varchar(25),
hind decimal(10,2)
);

create table testlogi(
    change_id INT IDENTITY PRIMARY KEY,
    id INT NOT NULL,
    nimetus VARCHAR(255) NOT NULL, 
    hind DEC(10,2) NOT NULL,
    updated_at DATETIME NOT NULL,
    operation CHAR(3) NOT NULL,
    CHECK(operation = 'INS' or operation='DEL')
);


CREATE TRIGGER trg_test
ON test
AFTER INSERT, DELETE
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO testlogi(
        id, 
        nimetus,
        hind, 
        updated_at, 
        operation
    )
    SELECT
        id,
        nimetus,
        hind,
        GETDATE(),
        'INS'
    FROM
        inserted i
    UNION ALL
    SELECT
        id,
        nimetus,
        hind,
        GETDATE(),
        'DEL'
    FROM
        deleted d;
END

--kontrollime
INSERT INTO test(
    nimetus, 
    hind
)
VALUES (
    'Kapp',
    549);

select * from test;
select * from testlogi;

DELETE FROM 
    test
WHERE 
    id = 2;

select * from test;
select * from testlogi;
